{"version":3,"file":"static/js/247.86c7974d.chunk.js","mappings":"yNAwDA,UAlDa,WAEX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAERE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAkBpB,OAfAI,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAE,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGP,OAHOF,EAAAC,KAAA,EAAAD,EAAAG,GAGdV,EAAOO,EAAAE,KAAA,GAAOE,EAAAA,EAAAA,IAAQlB,GAAQ,OAAAc,EAAAK,GAAAL,EAAAM,MAAA,EAAAN,EAAAG,IAAAH,EAAAK,IAAAL,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAG9BQ,QAAQC,IAAGT,EAAAO,IAAQ,yBAAAP,EAAAU,OAAA,GAAAX,EAAA,kBAEtB,kBARc,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KASfjB,GACF,GAAG,CAACT,KAIF2B,EAAAA,EAAAA,KAAA,MAAAC,SAEmB,IAAhBtB,EAAKuB,QACJF,EAAAA,EAAAA,KAAA,MAAIG,MAAO,CAAEC,UAAW,QAASH,SAAC,kDAKlCtB,EAAK0B,KAAI,SAAAC,GAAE,OACTC,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EAEED,EAAAA,EAAAA,KAAA,OACEQ,IAAG,kCAAAC,OAAoCH,EAAGI,cAC1CC,MAAO,IACPC,IAAKN,EAAGO,QAGVb,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,EAAGO,QAEPN,EAAAA,EAAAA,MAAA,KAAAN,SAAA,CAAG,cAAYK,EAAGQ,eAVXR,EAAGS,GAWP,KAKf,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["// Modul Cast.jsx \r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { getCast } from 'consts/searchApi';\r\n\r\nconst Cast = () => {\r\n  // Destrukturyzacja parametru movieId z obiektu useParams\r\n  const { movieId } = useParams();\r\n  // Użycie hooka useState do utworzenia stanu cast\r\n  const [cast, setCast] = useState([]);\r\n\r\n  // Użycie hooka useEffect do pobrania informacji o obsadzie filmu po zamontowaniu komponentu lub zmianie movieId\r\n  useEffect(() => {\r\n    // Funkcja asynchroniczna pobierająca informacje o obsadzie\r\n    const asyncFunc = async () => {\r\n      try {\r\n        // Wywołanie funkcji getCast, która zwraca informacje o obsadzie filmu\r\n        setCast(await getCast(movieId));\r\n      } catch (error) {\r\n        // Obsługa błędu, jeśli wystąpi problem podczas pobierania danych\r\n        console.log(error);\r\n      }\r\n    };\r\n    asyncFunc();\r\n  }, [movieId]); // movieId jest dodane do zależności useEffect, co oznacza, że useEffect będzie ponownie wywołany przy zmianie movieId\r\n\r\n  // Renderowanie komponentu Cast\r\n  return (\r\n    <ul>\r\n    {/* Warunek sprawdzający, czy istnieją informacje o obsadzie */}\r\n      {cast.length === 0 ? (\r\n        <li style={{ listStyle: 'none' }}>\r\n          We don't have cast information for this movie\r\n        </li>\r\n      ) : (\r\n        // Mapowanie informacji o obsadzie na elementy listy\r\n        cast.map(el => (\r\n          <li key={el.id}>\r\n          {/* Wyświetlenie zdjęcia aktora/aktorki */}\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w500${el.profile_path}`}\r\n              width={200}\r\n              alt={el.name}\r\n            />\r\n            {/* Wyświetlenie imienia i nazwiska */}\r\n            <p>{el.name}</p>\r\n            {/* Wyświetlenie roli w filmie */}\r\n            <p>Character: {el.character}</p>\r\n          </li>\r\n        ))\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Cast;"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","useEffect","asyncFunc","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","t0","getCast","t1","sent","t2","console","log","stop","apply","arguments","_jsx","children","length","style","listStyle","map","el","_jsxs","src","concat","profile_path","width","alt","name","character","id"],"sourceRoot":""}